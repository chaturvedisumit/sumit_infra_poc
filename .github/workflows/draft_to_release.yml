name: Weekly Release

on:
 push :
    branches :
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        pip install PyGithub
        pip install PyGithub requests

    - name: Publish Latest Draft Release
      id: publish_latest_draft_release
      run: |
        latest_draft_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases?per_page=100" | jq '[.[] | select(.draft == true) | {id: .id, created_at: .created_at}] | sort_by(.created_at) | last | .id')

        if [ -n "$latest_draft_id" ]; then
          echo "Publishing release from draft ID: $latest_draft_id"

          new_draft_id=$(curl -X POST -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$latest_draft_id/duplicate" | jq '.id')

          if [ -n "$new_draft_id" ]; then
            echo "New draft release created from draft ID: $latest_draft_id"
          else
            echo "Failed to create new draft release from draft ID: $latest_draft_id"
          fi

          curl -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$latest_draft_id" -d '{"draft": false}'
        else
          echo "No draft releases found."
        fi


        release_info=$(curl -sH "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/${{ github.repository }}/releases | \
        jq -r '.[] | select(.draft == false) | .html_url')

        echo "The release info is"$release_info
        echo "::set-output name=release_info::$release_info"

    - name: Post to a Slack channel
      id: slack
      if: steps.publish_release.outputs.release_info != ''
      uses: slackapi/slack-github-action@v1.25.0
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        repo_info: ${{ steps.publish_release.outputs.release_info }}
        repo_name: echo "$repo_info" | cut -d ',' -f 4
        echo "repo name is: $repo_name"
      with:
        channel-id: 'C06HM7BUHA6'  #The channel name where message has to be sent
        slack-message: |
          Bi-Weekly Release: The release has been successfully published for  ${{ steps.slack.outputs.repo_name }}.
          Release Details: ${{ steps.publish_release.outputs.release_info }}

    - name: Compile Release Notes
      run: python .github/scripts/compile_release_notes.py
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}


